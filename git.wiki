[[tags: egg]]

== git

[[toc:]]

=== Description

Bindings to the [[http://libgit2.github.com|libgit2]] library.

This library requires libgit2 0.16.0 and Chicken 4.7 or newer.

The source for this egg is available at [[http://github.com/evhan/chicken-git]].

=== Documentation

{{git}} provides an interface for reading & manipulating git repositories.
The library is split into two modules, {{git}} and {{git-lolevel}}:

* {{git-lolevel}} is essentially just the libgit2 API, thinly wrapped. Most of
  the function signatures remain the same, with a few exceptions: 

** Structures & pointers that would go on the stack are allocated
automatically.

** Return values are checked where appropriate, signaling an exception of type
{{git}} when negative.

** Pointer arrays are converted to rest arguments.

* {{git}} is a higher-level interface around {{git-lolevel}}, providing
  record types for each libgit2 structure.

The following documentation applies to the {{git}} module.

=== Usage

  (use git) ; or...
  (use git-lolevel)

It's not recommended to mix the two without prefixing one or the other's
imports, as the two libraries share many identifiers.

=== API

==== Repository

<record>repository</record>
<procedure>(repository? obj) => boolean</procedure>

A {{repository}} corresponds to an on-disk Git repository.

Many objects are invalidated when the repository to which they belong is GC'd.
As such, a handle to a repository should be kept for as long as its objects are
in use.

<procedure>(create-repository [path] [bare]) => repository</procedure>

Creates & returns a new repository at the given {{path}}, or the value of
{{current-directory}} if no path is given. If {{bare}} is given and not {{#f}},
the repository will be created without a working directory. An error is
signaled if the path is invalid or the repository cannot be created.

<procedure>(repository-open [path]) => repository</procedure>

Opens the Git repository indicated by {{path}}, or the value of
{{current-directory}} if no {{path}} is given. {{path}} may point to a bare
repository, a working directory containing a ".git" directory, or a ".git"
directory directly.

<procedure>(repository-path repository [type]) => string</procedure>

Returns the absolute path to the given {{repository}}. A {{type}} symbol may be
given in order to retrieve alternate paths for the repository, and should be
one of {{path}} (the default), {{index}}, {{odb}} or {{workdir}}.

<procedure>(repository-ref repository ref) => object</procedure>

Looks up a Git object in the given {{repository}}. {{ref}} may be a SHA1 string,
{{oid}}, {{reference}}, {{blob*}}, {{commit}}, {{tag}} or {{tree}}. The returned
object will be of type {{blob*}}, {{commit}}, {{tag}} or {{tree}}, or {{#f}} if
no object matching the given {{ref}} is found.

<procedure>(repository-empty? repository) => boolean</procedure>
<procedure>(repository-bare? repositoy) => boolean</procedure>

Returns a boolean indicating whether the given {{repository}} is empty
(contains no commits) or bare (an exposed git directory without a working
directory).

<procedure>(pack-references repository) => void</procedure>

Writes all loose references in the given {{repository}} into its "pack-refs"
file and removes them from the on-disk repository. Calling this function will
invalidate any existing {{reference}} objects belonging to the repository.

==== OID

<record>oid</record>
<procedure>(oid? obj) => boolean</procedure>

An {{oid}} is a unique reference to a Git object, corresponding to a
40-character SHA1 object name.

<procedure>(string->oid string) => oid</procedure>

Creates an {{oid}} from the given string, which should be a 40-character SHA1
hash. An error is signaled if the string is not a valid hash.

<procedure>(oid->string oid [length]) => string</procedure>

Returns the string representation of the given {{oid}}. The optional integer
{{length}} specifies the length of the returned string, up to 40 characters.

<procedure>(oid->path oid) => string</procedure>

Returns the string representation of the given {{oid}} in the form "xx/...",
where "xx" is the first two characters of the SHA1 and "..." is the remainder.

==== Reference

<record>reference</record>
<procedure>(reference? obj) => boolean</procedure>

A {{reference}} is a direct or indirect pointer to a Git commit object. A
repository's {{"HEAD"}} is a common example: it is a symbolic reference,
referring to the immediate reference {{"refs/heads/master"}}, which in turn
points at a {{commit}}.

<procedure>(reference repository ref) => reference</procedure>

Returns the {{reference}} specified by the given string {{ref}} from the
{{repository}}. {{ref}} must be a string referring to a valid reference, such
as {{"HEAD"}}, {{"ref/heads/master"}}, or {{"refs/tags/v0.1.0"}}. An error is
signalled if the reference doesn't exists.

<procedure>(references repository) => list</procedure>

Returns a list of all references in the given {{repository}}.

<procedure>(reference-id reference) => oid</procedure>

Returns the {{oid}} of the object referred to by the given {{reference}}.

<procedure>(reference-owner reference) => repository</procedure>

Returns the {{repository}} to which the given {{reference}} belongs.

<procedure>(reference-resolve reference) => reference</procedure>

Dereferences the given (possibly symbolic) {{reference}}, returning a new
non-symbolic {{reference}} pointing directly to a {{commit}}.

<procedure>(reference-target reference) => string</procedure>

Returns the name of the reference referred to by the given symbolic
{{reference}}. It is an error if the given {{reference}} is not symbolic.

<procedure>(reference-rename reference name) => void</procedure>
<procedure>(reference-target-set reference target) => void</procedure>

{{reference-rename}} changes the name of the given {{reference}} to the string
{{name}}.

{{reference-target-set}} updates a {{reference}} to refer to the given
{{target}}. If {{reference}} is an immediate reference (referring to an object
ID), {{target}} must be an {{oid}}, {{commit}}, or SHA1 string. If
{{reference}} is symbolic, {{target}} must be a {{reference}} or reference
name. It is an error to assign a symbolic reference an OID target and
vice-versa.

On success, the on-disk repository is updated immediately.

<procedure>(create-reference repository #!key name target [symbolic] [force]) => reference</procedure>

Creates & returns a new reference in the given {{repository}} for the specified
{{name}} and {{target}}. If {{symbolic}} is given and not {{#f}}, the created
reference will be so, and {{target}} must be a reference name or {{reference}}.
Otherwise, {{target}} must be a SHA1 string, {{oid}}, {{commit}} or
{{reference}} to a {{commit}}. If a reference of the given {{name}} exists and
{{force}} is not given or {{#f}}, an error is signalled. Otherwise, creation
is forced and the old reference will be overwritten.

On success, the on-disk repository is updated immediately.

<procedure>(reference-for-each procedure repository) => void</procedure>

Invokes the given unary procedure on each reference in the repository.

==== Branch

<procedure>(create-branch repository name target [force]) => reference</procedure>

Creates a new branch in the given {{repository}} of the given {{name}} and
{{target}} and returns a {{reference}} to the new branch. {{target}} must be a
{{commit}} or {{tag}} belonging to the repository. If a branch of the given
{{name}} exists and {{force}} is not given or {{#f}}, an error is signalled.
Otherwise, creation is forced and the old branch is be overwritten.

On success, the on-disk repository is updated immediately.

<procedure>(branches repository [type]) => list</procedure>

Returns a list {{reference}}s to each branch in the given {{repository}}. A
{{type}} symbol may be given, either {{'local}} or {{'remote}}, to specify what
type of branches should be listed; by default, {{'local}} is used.

<procedure>(branch-rename repository old new [force]) => void</procedure>

Renames a branch in the given repository from the {{old}} to {{new}}, which
should be strings. If a true-valued {{force}} is given and a branch with the
new name already exists, it will be overwritten.

On success, the on-disk repository is updated immediately.

<procedure>(branch-delete repository name [type]) => void</procedure>

Deletes the branch with the given {{name}} in the {{repository}}. A {{type}}
symbol may be given, either {{'local}} or {{'remote}}, to specify what type of
branch should be deleted; by default, {{'local}} is used.

On success, the on-disk repository is updated immediately.

==== Generic

<procedure>(object-id object) => oid</procedure>

Returns the {{oid}} referring to the given object, which must be a {{commit}},
{{tree}}, {{tag}} or {{blob*}}.

<procedure>(object-sha object [length]) => string</procedure>

Returns the SHA1 identifier corresponding to the given object, which may be a
{{commit}}, {{tree}}, {{tag}} {{blob*}}, {{reference}}, {{oid}} or {{string}}.

<procedure>(object-type object) => symbol</procedure>

Returns a symbol specifying the type of the given object, which must be one of
{{commit}}, {{tree}}, {{tag}} or {{blob*}}. {{#f}} is returned if the type
cannot be determined.

==== Blob*

<record>blob*</record>
<procedure>(blob*? obj) => boolean</procedure>

A {{blob*}} corresponds to Git's Blob object type, renamed in order to avoid
name clashes with Chicken's built-in {{blob}} type. It represents a file.

<procedure>(blob* repository ref) => blob*</procedure>

Returns the {{blob*}} specified by the given {{ref}} from the repository.
{{ref}} may be a SHA1 string, {{oid}}, or {{blob*}}. An error is signaled if
no such {{blob*}} exists.

<procedure>(blob*-content blob*) => blob</procedure>

Returns a {{blob}} (of the Chicken built-in type) with the contents of the given
{{blob*}} (of the Git object type).

<procedure>(blob*-size blob*) => int</procedure>

Returns the size in bytes of the given {{blob*}}.

==== Commit

<record>commit</record>
<procedure>(commit? obj) => boolean</procedure>

A {{commit}} corresponds to Git's commit object type.

<procedure>(commit repository ref) => commit</procedure>

Returns the {{commit}} specified by the given {{ref}} from the repository.
{{ref}} may be a SHA1 string, {{oid}}, {{reference}} or {{commit}}. An error
is signaled if no such {{commit}} exists.

<procedure>(commits-fold kons knil repository #!key [initial] [hide] [sort]) => list</procedure>

Folds over the given {{repository}}'s commits. If an {{initial}} {{commit}} or
SHA1 is given, only commits that are ancestors of that revision will be
returned. If a list of revisions to {{hide}} is given, they and their ancestors
will be ignored. If a {{sort}} is specified, commits will be collected in the
given order; this sort order must be one of the symbols {{none}}, {{topo}},
{{time}} or {{rev}}.

<procedure>(commits repository #!rest args) => list</procedure>

Returns a list of the {{commit}}s in the given {{repository}}. {{args}} follows
the {{#!key}} arguments specification for {{commits-fold}}.

<procedure>(commit-id commit) => oid</procedure>

Returns the {{oid}} for the given {{commit}}.

<procedure>(commit-time commit) => int</procedure>
<procedure>(commit-time-offset commit) => int</procedure>

{{commit-time}} and {{commit-time-offset}} return the timestamp of the given
{{commit}} and its UTC offset in minutes, respectively.

<procedure>(commit-message commit) => string</procedure>

Returns the full commit message of the given {{commit}}.

<procedure>(commit-tree commit) => tree</procedure>
<procedure>(commit-tree-id commit) => oid</procedure>

Return the {{tree}} associated with the given {{commit}} and its {{oid}},
respectively.

<procedure>(commit-author commit) => signature</procedure>
<procedure>(commit-committer commit) => signature</procedure>

{{commit-author}} and {{commit-committer}} return the given {{commit}}'s
respective {{signature}}s.

<procedure>(commit-parentcount commit) => int</procedure>
<procedure>(commit-parent commit [n]) => commit</procedure>

{{commit-parentcount}} returns the number of parents for a given {{commit}}.

{{commit-parent}} returns the {{n}}th parent of the given {{commit}}, or the
first if no {{n}} is given. If the {{commit}} has no parent, {{#f}} is
returned.

<procedure>(create-commit repository #!key message tree [parents] author [committer] [reference]) => commit</procedure>

Creates & returns a new commit in the given {{repository}}. The string
{{message}} will be used as the commit's message and {{tree}} will be the file
tree of the commit. {{parents}} should be be a (possibly empty) list of commits
to be used as this commit's parents. {{author}} and {{committer}} should be
signatures; if {{committer}} is not given, {{author}} will be used for both.
{{reference}}, if given and not {{#f}}, should be the {{reference}} that will
be updated to point to the newly-created commit.

Note that if no {{reference}} is given, the commit will be created in Git's
database but will not be reflected in any of the repository's branches. To
update the the working branch with the new commit, for example, use "HEAD".

On success, the on-disk repository is updated immediately.

<procedure>(merge-base repository commit1 commit2) => commit</procedure>

Returns the nearest common ancestor for the given commits. {{commit1}} and
{{commit2}} may be {{commit}}s, commit {{oid}}s, or SHA1 hashes.

==== Tag

<record>tag</record>
<procedure>(tag? obj) => boolean</procedure>

A {{tag}} corresponds to Git's Tag object type, which is a way to mark a
specific object as special in some way.

<procedure>(tag repository ref) => tag</procedure>

Creates & returns the {{tag}} specified by the given {{ref}} from the
repository. {{ref}} may be a SHA1 string, {{oid}}, or {{tag}}. An error is
signaled if no such {{tag}} exists.

<procedure>(tags repository) => list</procedure>

Returns a list of all tags in the given {{repository}}.

<procedure>(tag-id tag) => oid</procedure>

Returns the {{oid}} for the given {{tag}}.

<procedure>(tag-type tag) => symbol</procedure>

Returns the object type symbol of the target of the given {{tag}}, which will
be one of {{commit}}, {{tree}}, {{blob}}, or {{tag}}.

<procedure>(tag-name tag) => string</procedure>
<procedure>(tag-message tag) => string</procedure>

Return the name or message of the given {{tag}}.

<procedure>(tag-tagger tag) => signature</procedure>

Returns the {{signature}} of the {{tag}}'s creator.

<procedure>(tag-target tag) => object</procedure>
<procedure>(tag-peel tag) => object</procedure>

{{tag-target}} returns the object referred to by {{tag}}, which will be of type
{{commit}}, {{tree}}, {{blob}} or {{tag}}.

{{tag-peel}} is similar to {{tag-target}}, except that it recursively
dereferences the given {{tag}} until a non-tag object is found and returned.

<procedure>(tag-delete tag) => void</procedure>

Destroys the given {{tag}}.

On success, the on-disk repository is updated immediately.

<procedure>(create-tag repository #!key target name message tagger [force]) => tag</procedure>

Creates & returns a new tag in the given {{repository}} for the specified
{{name}}, {{message}} and {{target}}. {{name}} and {{message}} must be strings,
{{tagger}} must be a {{signature}},and {{target}} must be a {{commit}},
{{tree}} or {{blob*}}. If a tag of the given {{name}} exists and {{force}} is
not given or {{#f}}, an error is signalled.  Otherwise, creation is forced and
the old tag will be overwritten.

On success, the on-disk repository is updated immediately.

==== Tree

<record>tree</record>
<procedure>(tree? obj) => boolean</procedure>

A {{tree}} corresponds to Git's Tree object type, which represents a directory
tree.

<procedure>(tree repository ref) => tree</procedure>

Returns the {{tree}} specified by the given {{ref}} from the repository. {{ref}}
may be a SHA1 string, {{oid}}, or {{tree}}. An error is signaled if no such
{{tree}} exists.

<procedure>(tree-id tree) => oid</procedure>

Returns the {{oid}} for the given {{tree}}.

<procedure>(tree-entrycount tree) => int</procedure>

Returns the number of entries in the given {{tree}}. This count does not
include entries of contained directories.

<procedure>(tree-ref tree key) => tree-entry</procedure>

Returns a {{tree-entry}} object for the given {{key}} from the tree, or
{{#f}} if no such tree entry is found. {{key}} may be a zero-based integer
index or a pathname string.

<procedure>(tree->list tree [repository]) => list</procedure>

Returns a list of {{tree-entry}} objects for the given {{tree}}. If a
{{repository}} is given, this function will recurse into it, returning a nested
list of entries spanning the full directory tree.

<procedure>(create-tree repository index) => tree</procedure>

Creates and returns a {{tree}} object from the state of the given {{index}}.

<procedure>(tree-walk tree fn [mode]) => void</procedure>

Invokes the given function {{fn}} on each {{tree-entry}} in the given {{tree}}.
A walk order may be specified by the symbol {{mode}}, which should be one of
{{'pre}} or {{'post}}.

==== Tree Entry

<record>tree-entry</record>
<procedure>(tree-entry? obj) => boolean</procedure>

A {{tree-entry}} represents a single node in a {{tree}} object.

<procedure>(tree-entry-id tree-entry) => oid</procedure>

Returns the {{oid}} of the given {{tree-entry}}.

<procedure>(tree-entry-name tree-entry) => string</procedure>

Returns the name of the given {{tree-entry}}.

<procedure>(tree-entry-attributes tree-entry) => int</procedure>

Returns the Unix file attributes of the given {{tree-entry}}.

<procedure>(tree-entry-type tree-entry) => symbol</procedure>

Returns the object type symbol, either {{tree}} or {{blob}}, of the given
{{tree-entry}}.

<procedure>(tree-entry->object repository tree-entry) => object</procedure>

Returns an object of type {{tree}} or {{blob*}} from the given {{tree-entry}}
and {{repository}}, which must be the owner of the {{tree-entry}}.

==== Tree Builder

<record>tree-builder</record>
<procedure>(tree-builder? obj) => boolean</procedure>

A tree builder provides a way to construct {{tree}} objects in memory and write
them to a repository, without using an index as an intermediary.

<procedure>(make-tree-builder [tree]) => tree-builder</procedure>

Creates a new {{tree-builder}}. If a {{tree}} is given, it is used as the
constructed tree's initial state. Otherwise, it must be populated manually
using {{tree-builder-insert}}.

<procedure>(tree-builder-insert tree-builder object name attributes) => tree-entry</procedure>

Inserts {{object}} into the {{tree-builder}}'s tree under the given filename
{{name}}. The inserted object must be a {{tree}} or {{blob*}}, and will have
the given {{attributes}} (an integer file mode).

<procedure>(tree-builder-ref tree-builder path) => tree-entry</procedure>

Returns the {{tree-entry}} from the given {{tree-builder}} at {{path}}, which
should be a filename string. If the requested file doesn't exist, {{#f}} is
returned.

<procedure>(tree-builder-remove tree-builder path) => void</procedure>

Removes the object at the given {{path}} from the {{tree-builder}}'s tree.

<procedure>(tree-builder-write repo tree-builder) => tree</procedure>

Writes the {{tree-builder}}'s tree to the given {{repository}}, modifying the
on-disk repository on success. The resulting {{tree}} is returned.

==== Diff

<record>diff</record>
<procedure>(diff? obj) => boolean</procedure>
<record>diff-file</record>
<procedure>(diff-file? obj) => boolean</procedure>

A {{diff}} is the difference in a single file between two Git {{tree}}s. Each
diff has a status, similarity, and a pair of {{diff-file}}s for the old and new
files, respectively.

Each diff-file has an {{oid}}, {{path}}, and {{mode}} (Unix file attributes).

<procedure>(diff repository [tree object]) => list</procedure>

Compares a tree to another object in the given {{repository}}, or compares a
repository's working directory to its index if no other arguments are given.
Returns a list of {{diff}} objects is for every difference between them.

{{object}} may be an {{index}}, {{tree}}, or one of the symbols {{'index}} or
{{'workdir}} to specify a diff target indirectly.

<procedure>(diff-status diff) => symbol</procedure>

Returns a symbol representing the status of a {{diff}}, which will be
one of the following symbols:

    modified
    added
    deleted
    modified
    renamed
    copied
    ignored
    untracked

<procedure>(diff-similarity diff) => integer</procedure>

Returns an integer value from 0 to 100 representing the similarity between a
{{diff}}'s old and new files, high values being representing greater
similarity.

<procedure>(diff-old-file diff)</procedure>
<procedure>(diff-new-file diff)</procedure>

Returns the {{diff-file}} object for the old and new file of the given
{{diff}}, respectively. If the file is added or deleted, {{#f}} will be
returned for the diff's old or new file, respectively.

<procedure>(diff-file-path diff-file) => string</procedure>

Returns the path of the given {{diff-file}}, relative to the repository's root.
In the case of a rename, the paths of the old and new {{diff-file}} for a given
{{diff}} may be different.

<procedure>(tree-file-id diff-file) => oid</procedure>

Returns the {{oid}} of the given {{diff-file}}.

<procedure>(diff-file-mode diff-file) => int</procedure>

Returns the Unix file attributes of the given {{diff-file}}.

<procedure>(diff-old-id diff) => oid</procedure>
<procedure>(diff-new-id diff) => oid</procedure>
<procedure>(diff-old-mode diff) => int</procedure>
<procedure>(diff-new-mode diff) => int</procedure>
<procedure>(diff-old-path diff) => string</procedure>
<procedure>(diff-new-path diff) => string</procedure>

Convenience procedures for accessing the fields of a {{diff}} objects's old &
new {{diff-file}}s.

    (diff-old-id diff) => (diff-file-id (diff-old-file diff))

==== Status

<procedure>(file-status repository path) => symbol</procedure>

Returns the status of the file specified by {{path}} in the given
{{repository}}.

This status will be one of the following symbols:

    current
    index/new
    index/modified
    index/deleted
    worktree/new
    worktree/modified
    worktree/deleted
    ignored

Currently, if a file is of two statuses (for example, partially-staged, so it
is both {{index/modified}} and {{worktree/modified}}) this function will return
the empty list.

<procedure>(file-ignored? repository path) => boolean</procedure>

Returns a boolean indicating whether the given {{path}} in {{repository}} is
ignored by Git or not.

==== Index

<record>index</record>
<procedure>(index? obj) => boolean</procedure>

An {{index}} represents the on-disk state of Git's working tree. Changes made
to a given {{index}} exist only in memory until written to disk using
{{index-write}}.

<procedure>(index-open repo-or-path) => index</procedure>

It {{repo-or-path}} is a {{repository}}, returns the repository's index.  If it
is a string, creates and returns the index at the given path, signaling an
error if such an index doesn't exist. It is not possible to open the index of a
bare repository, and doing so will result in an exception.

<procedure>(index-entrycount index) => int</procedure>
<procedure>(index-entrycount-unmerged index) => int</procedure>

Returns the total number of index entries and unmerged index entries of the
given {{index}}, respectively. This is essentially a count of all files tracked
by Git in a given repository.

<procedure>(index-read index) => void</procedure>

Updates the given {{index}} to reflect the current state of the on-disk
repository.

<procedure>(index-write index) => void</procedure>

Writes the state of the given {{index}} from memory onto disk, modifying the
repository on success.

<procedure>(index-clear index) => void</procedure>

Removes all enries from a given {{index}}.

<procedure>(index-add index path [stage]) => void</procedure>

Adds a given {{path}}, which must refer to a file relative to the index's
repository, to the {{index}}. If an integer {{stage}} is given, it will be used
as the staging number for the changes.

<procedure>(index-remove index ref) => void</procedure>

Removes an entry from the given {{index}}. {{ref}} may be a file path string or
an zero-based integer index. If no entry is removed, {{#f}} is returned.

<procedure>(index-find index path) => int</procedure>

Returns the zero-based integer index of the file specified by {{path}} in the
given {{index}}, signaling an error if it doesn't exist.

<procedure>(index-ref index key [type]) => index-entry</procedure>

Returns the {{index-entry}} from the {{index}} for the given {{key}}, which may
be an zero-based integer index or a pathname string, or {{#f}} if no such entry
exists. If a type symbol is given, either {{merged}} (the default behavior) or
{{unmerged}}, the search will be limited to such entries.

<procedure>(index->list index [type]) => list</procedure>

Returns a list of all {{index-entry}} objects in the given {{index}}. If a type
symbol is given, either {{merged}} (the default behavior) or {{unmerged}}, the
returned list will be limited to such entries.

==== Index Entry

<record>index-entry</record>
<procedure>(index-entry? obj) => boolean</procedure>

An {{index-entry}} represents a tracked file in Git's working directory,
belonging to an {{index}}.

<procedure>(index-entry-id index-entry) => oid</procedure>

Returns the {{oid}} referring to the given {{index-entry}}.

<procedure>(index-entry-path index-entry) => string</procedure>

Returns the file path of the given {{index-entry}} relative to the owning
repository's working directory.

<procedure>(index-entry-ctime index-entry) => int</procedure>
<procedure>(index-entry-mtime index-entry) => int</procedure>
<procedure>(index-entry-dev index-entry) => int</procedure>
<procedure>(index-entry-ino index-entry) => int</procedure>
<procedure>(index-entry-size index-entry) => int</procedure>
<procedure>(index-entry-stage index-entry) => int</procedure>
<procedure>(index-entry-uid index-entry) => int</procedure>
<procedure>(index-entry-gid index-entry) => int</procedure>
<procedure>(index-entry-mode index-entry) => int</procedure>
<procedure>(index-entry-flags index-entry) => int</procedure>
<procedure>(index-entry-extended index-entry) => int</procedure>

These methods return the file attributes for the given {{index-entry}} as it
exists in its in-memory {{index}}.

==== ODB

<record>odb</record>
<procedure>(odb? obj) => boolean</procedure>

An {{odb}} offers a direct interface to Git's internal object database.

<procedure>(odb-open repo-or-path) => odb</procedure>

It {{repo-or-path}} is a {{repository}}, returns the repository's object
database. If it is a string, creates and returns the object database at the
given path, signaling an error if no such database exists.

<procedure>(odb-has-object? odb ref) => boolean</procedure>

Determines if the given {{odb}} contains the given object {{ref}}, which should
be a SHA1 string, {{oid}} or Git object of type {{commit}}, {{blob*}}, {{tree}}
or {{tag}}.

<procedure>(odb-read odb ref) => odb-object</procedure>

Reads the given object {{ref}} from the database, signaling an error if it
doesn't exist. {{ref}} should be a SHA1 string, {{oid}} or Git object of type
{{commit}}, {{blob*}}, {{tree}} or {{tag}}.

<procedure>(odb-write odb data [type]) => oid</procedure>

Writes a given data {{blob}} to the {{odb}}, returning an {{oid}} referring to
the newly-created object. The type of the stored data can be specified by an
optional {{type}} symbol, which defaults to {{blob}}.

<procedure>(odb-hash odb data [type]) => oid</procedure>

Returns an {{oid}} reference for the given data {{blob}} as though it had been
stored to the given {{odb}} but without writing it to disk. The type of the
hashed data can be specified by an optional {{type}} symbol, which defaults to
{{blob}}.

==== ODB Object

<record>odb-object</record>
<procedure>(odb-object? obj) => boolean</procedure>

An {{odb-object}} is a reference to a blob of data in a Git object database.

<procedure>(odb-object-id odb-object) => oid</procedure>

Returns the {{oid}} for the given {{odb-object}}.

<procedure>(odb-object-size odb-object) => int</procedure>

Returns the size of the {{odb-object}}'s data in bytes.

<procedure>(odb-object-type odb-object) => symbol</procedure>

Returns the object type symbol of the given {{odb-object}}.

<procedure>(odb-object-data odb-object) => blob</procedure>

Returns a blob consisting of the {{odb-object}}'s data.

==== Signature

<record>signature</record>
<procedure>(signature? obj) => boolean</procedure>

A signature is a record of the name, email, time and UTC offset of a given Git
object.

<procedure>(make-signature name email [time [offset]]) => signature</procedure>

Returns a new {{signature}} for the given name and email strings. If a
timestamp {{time}} and integer {{offset}} are given, they will be used as the
signature time; otherwise, the current time will be used.

Unlike the {{create-*}} functions, no representation of this signature is
created in the repository; it exists only in memory until associated with a
{{commit}} or {{tag}}.

<procedure>(signature-name signature) => string</procedure>
<procedure>(signature-email signature) => string</procedure>

{{signature-name}} and {{signature-email}} return strings for the
given {{signature}}'s respective fields.

<procedure>(signature-time signature) => int</procedure>
<procedure>(signature-time-offset signature) => int</procedure>

{{signature-time}} and {{signature-time-offset}} return the timestamp of the
given {{signature}} and its UTC offset in minutes, respectively.

==== Config

<record>config</record>
<procedure>(config? obj) => boolean</procedure>

A {{config}} represents a Git configuration file, associated with either a
repository, the current user, or the system-wide Git installation.

<procedure>(config-path [type]) => string</procedure>

Returns the path to a Git configuration file. {{type}} may be a symbol, either
{{user}} or {{system}}, to request the path to the configuration for either the
current user or the system-wide Git installation, respectively. {{type}}
defaults to {{user}}. An error is signalled if no configuration file is found
at the requested location.

<procedure>(config-open [source]) => config</procedure>

Reads the Git configuration file indicated by {{source}}, which may be a
{{repository}}, path, or symbol as expected by {{config-path}}. An
error is signalled if no configuration file is found at the requested location.

<procedure>(config-get config name [type]) => object</procedure>

Returns the value of the property {{name}} in the given {{config}} object. The
value is returned as a string, unless an alternative return type is specified
by the given symbol {{type}}, which should be {{string}}, {{symbol}}, or
{{number}}. An error is signaled if the requested property doesn't exist, or if
it cannot be converted to the specified return type.

<procedure>(config-set config name value) => object</procedure>

Sets the value of the property {{name}} in the given {{config}} object to the
given {{value}}.

On success, the new value is written immediately to disk.

<procedure>(config-unset config name) => void</procedure>

Deletes the property {{name}} from the given {{config}} object.

On success, the change is written immediately to disk.

=== History

* 0.0.17 - libgit2 0.17.0 small test fix
* 0.0.16 - libgit2 0.17.0 follow libgit2's diff & branch apis, improve C callback safety
* 0.0.15 - libgit2 0.17.0 bindings & diff api changes
* 0.0.14 - libgit2 0.17.0 compatibility
* 0.0.13 - libgit2 0.16.0

=== Author

Evan Hanson

=== License

Copyright (c) 2012, Evan Hanson, 3-Clause BSD License
