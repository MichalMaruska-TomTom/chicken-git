[[tags: egg]]

== git

[[toc:]]

=== Description

Bindings to the [[http://libgit2.github.com|libgit2]] library.

Please note that the libgit library is currently a moving target, under heavy
development. This library has been written and tested against Chicken 4.6 & 4.7
and libgit2 0.15.0. If you encounter problems, check your versions.

=== Documentation

{{git}} provides an interface for reading & manipulating git repositories.
The library is split into two modules, {{git}} and {{git-lolevel}}:

* {{git-lolevel}} is essentially just the libgit2 API, thinly wrapped. Most of
  the function signatures remain the same, with a few exceptions: 

** Structures & pointers that would go on the stack are allocated
automatically.

** Return values are checked where appropriate, signaling an exception of type
{{git}} when negative.

** Pointer arrays are converted to rest arguments.

* {{git}} is a higher-level interface around {{git-lolevel}}, providing
  record types for each libgit2 structure.

The following documentation applies to the {{git}} module.

=== Usage

  (use git) ; or...
  (use git-lolevel)

It's not recommended to mix the two without prefixing one or the other's
imports, as the two libraries share many identifiers.

=== API

==== Repository

<record>repository</record>
<procedure>(repository? obj) => boolean</procedure>

A {{repository}} corresponds to an on-disk Git repository.

<procedure>(repository-open [path]) => repository</procedure>

Opens the Git repository indicated by {{path}}, or the value of
{{current-directory}} if no {{path}} is given. {{path}} may point to a bare
repository, a working directory containing a ".git" directory, or a ".git"
directory directly.

<procedure>(repository-path repository [type]) => string</procedure>

Returns the absolute path to the given {{repository}}. A {{type}} symbol may be
given in order to retrieve alternate paths for the repository, and should be
one of {{path}} (the default), {{index}}, {{odb}} or {{workdir}}.

<procedure>(repository-ref repository ref [type]) => object</procedure>

Looks up a Git object in the given {{repository}}. {{ref}} may be a SHA1 string,
{{oid}}, {{reference}}, {{blob*}}, {{commit}}, {{tag}} or {{tree}}. The returned
object will be of type {{blob*}}, {{commit}}, {{tag}} or {{tree}}, or {{#f}} if
no object matching the given {{ref}} is found. An optional {{type}} symbol may
be given in order to enforce an object type for which to search.

<procedure>(repository-empty? repository) => boolean</procedure>
<procedure>(repository-bare? repositoy) => boolean</procedure>

Returns a boolean indicating whether the given {{repository}} is empty
(contains no commits) or bare (an exposed git directory without a working
directory).

<procedure>(pack-references repository) => void</procedure>

Writes all loose references in the given {{repository}} into its "pack-refs"
file and removes them from the on-disk repository. Calling this function will
invalidate any existing {{reference}} objects belonging to the repository.

==== OID

<record>oid</record>
<procedure>(oid? obj) => boolean</procedure>

An {{oid}} is a unique reference to a Git object, corresponding to a
40-character SHA1 object name.

<procedure>(string->oid string) => oid</procedure>

Creates an {{oid}} from the given string, which should be a 40-character SHA1
hash. An error is signaled if the string is not a valid hash.

<procedure>(oid->string oid [length]) => string</procedure>

Returns the string representation of the given {{oid}}. The optional integer
{{length}} specifies the length of the returned string, up to 40 characters.

<procedure>(oid->path oid) => string</procedure>

Returns the string representation of the given {{oid}} in the form "xx/...",
where "xx" is the first two characters of the SHA1 and "..." is the remainder.

==== Reference

<record>reference</record>
<procedure>(reference? obj) => boolean</procedure>

A {{reference}} is an indirect pointer to a Git commit object. A repository's
{{"HEAD"}} is a common example.

<procedure>(reference repository ref) => reference</procedure>

Returns the {{reference}} specified by the given string {{ref}} from the
{{repository}}. {{ref}} must refer to a valid reference, such as
{{"HEAD"}}, {{"ref/heads/master"}}, or {{"refs/tags/v0.1.0"}}. An error is
signalled if the reference doesn't exists.

<procedure>(references repository) => list</procedure>

Returns a list of all references in the given {{repository}}.

<procedure>(reference-id reference) => oid</procedure>

Returns the {{oid}} of the object referred to by the given {{reference}}.

<procedure>(reference-owner reference) => repository</procedure>

Returns the {{repository}} to which the given {{reference}} belongs.

<procedure>(reference-resolve reference) => reference</procedure>

Dereferences the given (possibly symbolic) {{reference}}, returning a new
non-symbolic {{reference}} pointing directly to a {{commit}}.

<procedure>(reference-rename reference name) => void</procedure>
<procedure>(reference-target-set reference target) => void</procedure>

{{reference-rename}} changes the name of the given {{reference}} to the string
{{name}}.

{{reference-target-set}} updates a {{reference}} to refer to the given
{{target}}. If {{reference}} is an immediate reference (referring to an object
ID), {{target}} must be an {{oid}}, {{commit}}, or SHA1 string. If
{{reference}} is symbolic, {{target}} must be a {{reference}} or reference
name. It is an error to assign a symbolic reference an OID target and
vice-versa.

On success, the on-disk repository is updated immediately.

<procedure>(create-reference repository #!key name target [symbolic?] [force?]) => reference</procedure>

Creates & returns a new reference in the given {{repository}} for the specified
{{name}} and {{target}}. If {{symbolic?}} is given and not {{#f}}, the created
reference will be so, and {{target}} must be a reference name or {{reference}}.
Otherwise, {{target}} must be a SHA1 string, {{oid}}, {{commit}} or
{{reference}} to a {{commit}}. If a reference of the given {{name}} exists and
{{force?}} is not given or {{#f}}, an error is signalled. Otherwise, creation
is forced and the old reference will be overwritten.

On success, the on-disk repository is updated immediately.

==== Generic

<procedure>(object-id object) => oid</procedure>

Returns the {{oid}} referring to the given object, which must be a {{commit}},
{{tree}}, {{tag}} or {{blob*}}.

<procedure>(object-sha object [length]) => string</procedure>

Returns the SHA1 identifier corresponding to the given object, which may be a
{{commit}}, {{tree}}, {{tag}} {{blob*}}, {{reference}}, {{oid}} or {{string}}.

<procedure>(object-type object) => symbol</procedure>

Returns a symbol specifying the type of the given object, which must be one of
{{commit}}, {{tree}}, {{tag}} or {{blob*}}. {{#f}} is returned if the type
cannot be determined.

==== Blob*

<record>blob*</record>
<procedure>(blob*? obj) => boolean</procedure>

A {{blob*}} corresponds to Git's Blob object type, renamed in order to avoid
name clashes with Chicken's built-in {{blob}} type. It represents a file.

<procedure>(blob* repository ref) => blob*</procedure>

Returns the {{blob*}} specified by the given {{ref}} from the repository.
{{ref}} may be a SHA1 string, {{oid}}, or {{blob*}}. An error is signaled if
no such {{blob*}} exists.

<procedure>(blob*-content blob*) => blob</procedure>

Returns a {{blob}} (of the Chicken built-in type) with the contents of the given
{{blob*}} (of the Git object type).

<procedure>(blob*-size blob*) => int</procedure>

Returns the size in bytes of the given {{blob*}}.

==== Commit

<record>commit</record>
<procedure>(commit? obj) => boolean</procedure>

A {{commit}} corresponds to Git's commit object type.

<procedure>(commit repository ref) => commit</procedure>

Returns the {{commit}} specified by the given {{ref}} from the repository.
{{ref}} may be a SHA1 string, {{oid}}, {{reference}} or {{commit}}. An error
is signaled if no such {{commit}} exists.

<procedure>(commits repository #!key [initial] [hide] [sort]) => list</procedure>

Returns a list of all {{commit}}s in the given {{repository}}. If a {{commit}}
or SHA1 {{initial}} is given, 

<procedure>(commit-id commit) => oid</procedure>

Returns the {{oid}} for the given {{commit}}.

<procedure>(commit-time commit) => int</procedure>
<procedure>(commit-time-offset commit) => int</procedure>

{{commit-time}} and {{commit-time-offset}} return the timestamp of the given
{{commit}} and its UTC offset in minutes, respectively.

<procedure>(commit-message commit) => string</procedure>

Returns the full commit message of the given {{commit}}.

<procedure>(commit-tree commit) => tree</procedure>

Returns the {{tree}} associated with the given {{commit}}.

<procedure>(commit-author commit) => signature</procedure>
<procedure>(commit-committer commit) => signature</procedure>

{{commit-author}} and {{commit-committer}} return the given {{commit}}'s
respective {{signature}}s.

<procedure>(commit-parentcount commit) => int</procedure>
<procedure>(commit-parent commit [n]) => commit</procedure>

{{commit-parentcount}} returns the number of parents for a given {{commit}}.

{{commit-parent}} returns the {{n}}th parent of the given {{commit}}, or the
first if no {{n}} is given.

<procedure>(create-commit repository #!key message tree [parents] author [committer] [reference]) => commit</procedure>

Creates & returns a new commit in the given {{repository}}. The string
{{message}} will be used as the commit's message and {{tree}} will be the file
tree of the commit. {{parents}} should be be a (possibly empty) list of commits
to be used as this commit's parents. {{author}} and {{committer}} should be
signatures; if {{committer}} is not given, {{author}} will be used for both.
{{reference}}, if given and not {{#f}}, should be the {{reference}} that will
be updated to point to the newly-created commit.

Note that if no {{reference}} is given, the commit will be created in Git's
database but will not be reflected in any of the repository's branches. To
update the the working branch with the new commit, for example, use "HEAD".

On success, the on-disk repository is updated immediately.

==== Tag

<record>tag</record>
<procedure>(tag? obj) => boolean</procedure>

A {{tag}} corresponds to Git's Tag object type, which is a way to mark a
specific object as special in some way.

<procedure>(tag repository name) => tag</procedure>

Creates & returns the {{tag}} specified by the given {{ref}} from the
repository. {{ref}} may be a SHA1 string, {{oid}}, or {{tag}}. An error is
signaled if no such {{tag}} exists.

<procedure>(tags repository) => list</procedure>

Returns a list of all tags in the given {{repository}}.

<procedure>(tag-id tag) => oid</procedure>

Returns the {{oid}} for the given {{tag}}.

<procedure>(tag-type tag) => symbol</procedure>

Returns the object type symbol of the target of the given {{tag}}, which will
be one of {{commit}}, {{tree}}, {{blob}}, or {{tag}}.

<procedure>(tag-name tag) => string</procedure>
<procedure>(tag-message tag) => string</procedure>

Return the name or message strings of the given {{tag}}.

<procedure>(tag-tagger tag) => signature</procedure>

Returns the {{signature}} of the {{tag}}'s creator.

<procedure>(tag-target tag) => object</procedure>

Returns the object referred to by {{tag}}, which will be of type {{commit}},
{{tree}}, {{blob}} or {{tag}}.

<procedure>(tag-delete tag) => void</procedure>

Destroys the given {{tag}}.

On success, the on-disk repository is updated immediately.

<procedure>(create-tag repository #!key target name message tagger [force?]) => tag</procedure>

Creates & returns a new tag in the given {{repository}} for the specified
{{name}}, {{message}} and {{target}}. {{name}} and {{message}} must be strings,
{{tagger}} must be a {{signature}},and {{target}} must be a {{commit}},
{{tree}} or {{blob*}}. If a tag of the given {{name}} exists and {{force?}} is
not given or {{#f}}, an error is signalled.  Otherwise, creation is forced and
the old tag will be overwritten.

On success, the on-disk repository is updated immediately.

==== Tree

<record>tree</record>
<procedure>(tree? obj) => boolean</procedure>

A {{tree}} corresponds to Git's Tree object type, which represents a directory
tree.

<procedure>(tree repository ref) => tree</procedure>

Returns the {{tree}} specified by the given {{ref}} from the repository. {{ref}}
may be a SHA1 string, {{oid}}, or {{tree}}. An error is signaled if no such
{{tree}} exists.

<procedure>(tree-id tree) => oid</procedure>

Returns the {{oid}} for the given {{tree}}.

<procedure>(tree-entrycount tree) => int</procedure>

Returns the number of entries in the given {{tree}}. This count does not
include entries of contained directories.

<procedure>(tree-ref tree key) => tree-entry</procedure>

Returns a {{tree-entry}} object for the given {{key}}, or {{#f}} if no such
object is found. {{key}} may be a numerical index or the string of an entry
name.

<procedure>(tree->list tree [repository]) => list</procedure>

Returns a list of {{tree-entry}} objects for the given {{tree}}. If a
{{repository}} is given, this function will recurse into it, returning a nested
list of entries spanning the full directory tree.

<procedure>(create-tree repository index) => tree</procedure>

Creates and returns a {{tree}} object from the state of the given {{index}}.

==== Tree Entry

<record>tree-entry</record>
<procedure>(tree-entry? obj) => boolean</procedure>

A {{tree-entry}} represents a single node in a {{tree}} object.

<procedure>(tree-entry-id tree-entry) => oid</procedure>

Returns the {{oid}} of the given {{tree-entry}}.

<procedure>(tree-entry-name tree-entry) => string</procedure>

Returns the name of the given {{tree-entry}}.

<procedure>(tree-entry-attributes tree-entry) => int</procedure>

Returns the Unix file attributes of the given {{tree-entry}}.

<procedure>(tree-entry-type tree-entry) => symbol</procedure>

Returns the object type symbol, either {{tree}} or {{blob}}, of the given
{{tree-entry}}.

<procedure>(tree-entry->object repository tree-entry) => object</procedure>

Returns an object of type {{tree}} or {{blob*}} from the given {{tree-entry}}
and {{repository}}, which must be the owner of the {{tree-entry}}.

==== Index

<record>index</record>
<procedure>(index? obj) => boolean</procedure>
<procedure>(index-open repo-or-path) => index</procedure>
<procedure>(index-entrycount index) => int</procedure>
<procedure>(index-entrycount-unmerged index) => int</procedure>
<procedure>(index-read index) => void</procedure>
<procedure>(index-write index) => void</procedure>
<procedure>(index-clear index) => void</procedure>
<procedure>(index-add index path [stage]) => void</procedure>
<procedure>(index-remove index ref) => void</procedure>
<procedure>(index-find index) => int</procedure>
<procedure>(index-ref index key) => index-entry</procedure>
<procedure>(index->list index [type]) => list</procedure>

TODO

==== Index Entry

<record>index-entry</record>
<procedure>(index-entry? obj) => boolean</procedure>
<procedure>(index-entry-id index-entry) => oid</procedure>
<procedure>(index-entry-path index-entry) => string</procedure>
<procedure>(index-entry-ctime index-entry) => int</procedure>
<procedure>(index-entry-mtime index-entry) => int</procedure>
<procedure>(index-entry-dev index-entry) => int</procedure>
<procedure>(index-entry-ino index-entry) => int</procedure>
<procedure>(index-entry-size index-entry) => int</procedure>
<procedure>(index-entry-stage index-entry) => int</procedure>
<procedure>(index-entry-uid index-entry) => int</procedure>
<procedure>(index-entry-gid index-entry) => int</procedure>
<procedure>(index-entry-mode index-entry) => int</procedure>
<procedure>(index-entry-flags index-entry) => int</procedure>
<procedure>(index-entry-extended index-entry) => int</procedure>
<procedure>(index-entry->object repository index-entry) => object</procedure>

TODO

==== ODB

<record>odb</record>
<procedure>(odb? obj) => boolean</procedure>
<procedure>(odb-new) => odb</procedure>
<procedure>(odb-open repo-or-path) => odb</procedure>
<procedure>(odb-has-object? odb ref) => boolean</procedure>
<procedure>(odb-read odb ref) => odb-object</procedure>
<procedure>(odb-write odb data [type]) => oid</procedure>
<procedure>(odb-hash odb data [type]) => oid</procedure>

TODO

==== ODB Object

<record>odb-object</record>
<procedure>(odb-object? obj) => boolean</procedure>

An {{odb-object}} is a reference to a blob of data in a Git object database.

<procedure>(odb-object-id odb-object) => oid</procedure>

Returns the {{oid}} for the given {{odb-object}}.

<procedure>(odb-object-size odb-object) => int</procedure>

Returns the size of the {{odb-object}}'s data in bytes.

<procedure>(odb-object-type odb-object) => symbol</procedure>

Returns the object type symbol of the given {{odb-object}}.

<procedure>(odb-object-data odb-object) => blob</procedure>

Returns a blob consisting of the {{odb-object}}'s data.

==== Signature

<record>signature</record>
<procedure>(signature? obj) => boolean</procedure>

A signature is a record of the name, email, time and UTC offset of a given Git
object.

<procedure>(make-signature name email [time [offset]]) => signature</procedure>

Returns a new {{signature}} for the given name and email strings. If a
timestamp {{time}} and integer {{offset}} are given, they will be used as the
signature time; otherwise, the current time will be used.

Unlike the {{create-*}} functions, no representation of this signature is
created in the repository; it exists only in memory until associated with a
{{commit}} or {{tag}}.

<procedure>(signature-name signature) => string</procedure>
<procedure>(signature-email signature) => string</procedure>

{{signature-name}} and {{signature-email}} return strings for the
given {{signature}}'s respective fields.

<procedure>(signature-time signature) => int</procedure>
<procedure>(signature-time-offset signature) => int</procedure>

{{signature-time}} and {{signature-time-offset}} return the timestamp of the
given {{signature}} and its UTC offset in minutes, respectively.

=== Author

Evan Hanson

=== License

Copyright (c) 2011, Evan Hanson, 3-Clause BSD License
